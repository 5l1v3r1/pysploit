"""
Base exploit class that exploits are built off of
"""


class Exploit:
    def __init__(self):
        #Exploit information
        self.vuln_name = "Base Exploit (Please overwrite)"
        self.disclosure_ids = ["CVE-XXXX-XX (Please overwrite)"]
        self.vuln_reliability = "NA (Please overwrite)"
        self.vuln_type = "NA (Please overwrite)"
        self.vuln_description = "Base Exploit (Please overwrite)"
        self.options = {"empty": "options"}

    def show_exploit_info(self):
        """Shows a description of the exploit

        Prints the description of the exploit, relevant background,
        and architecture targeting information about the module.
        """
        info_string = """
    Name: 			{}
    Disclosure IDs: 	{}
    Vulnerability Type: 	{}
    Description: {}
    	""".format(
            self.vuln_name,
            ','.join(disc_id for disc_id in self.disclosure_ids),
            self.vuln_type,
            self.vuln_description
        )

        print(info_string)

    def set_option(self, option, value):
        """
        Sets the value of a given option to the given value

        :param option: string name of the option to set
        :param value: value to set the option's value to
        """
        self.options[option] = value

    def show_exploit_options(self):
        """Prints relevant exploit options and information

        Prints the exploit fields that need to be set by the user before an
        exploitation attempt can be launched.
        """
        print("[~]\tExploit options\t[~]")
        print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
        for option in self.options.keys():
            space_fill = " " * (24 - len(option))
            print("{}{}|\t\t{}".format(option, space_fill, self.options[option]))
        print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")